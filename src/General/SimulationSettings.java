package General;

import Entity.AnimalClasses.Animal;
import Entity.AnimalClasses.PredatorClasses.Bear;
import Entity.PlantClasses.Plant;
import Entity.AnimalClasses.PredatorClasses.*;
import Entity.AnimalClasses.HerbivoreClasses.*;
import Entity.PlantClasses.*;

/**
 * –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.
 * –í –Ω–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å / —É–¥–∞–ª—è—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏.
 * –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è / —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–µ–¥–∞–Ω–∏—è
 */
public class SimulationSettings {
    // –†–∞–∑–º–µ—Ä –æ—Å—Ç—Ä–æ–≤–∞
    public static final int ISLAND_WIDTH = 100;
    public static final int ISLAND_HEIGHT = 20;

    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–∫—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    public static final long TICK_DURATION = 1000;

    // –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ - –¥–µ–ª–∞–µ–º MAX_TICKS –∏—Ç–µ—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä—É—á–Ω—É—é
    public static final int MAX_TICKS = 100;

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–Ω—ã—à–µ–π –ø—Ä–∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–∏
    //public static final int OFFSPRING_COUNT = 2;

    // "–ü–ª–∞—Ç–∞" –∑–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ - –¥–æ–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
    public static final double ANIMAL_REPRODUCTION_FEE = 0.2;

    // "–ü–ª–∞—Ç–∞" –∑–∞ –∂–∏–∑–Ω—å - –¥–æ–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
    public static final double ANIMAL_PRICE_OF_LIFE = 0.05;

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∑–∞ —Ç–∞–∫—Ç
    public static final double PLANT_GROWTH_PROBABILITY = 0.1;

    // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ (–ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞) —Ä–∞—Å—Ç–µ–Ω–∏–π –∑–∞ —Ç–∞–∫—Ç - –¥–æ–ª—è –æ—Ç —Ç–µ–∫—É—â–µ–π –º–∞—Å—Å—ã
    public static final double PLANT_GROWTH_SPEED = 0.05;

    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    public enum AnimalType {
        WOLF(Wolf.class, 50, 30, 5, 8, 50, "üê∫"),
        BOA(Boa.class, 15, 30, 2, 3, 30, "üêç"),
        FOX(Fox.class, 8, 30, 4, 2, 50, "ü¶ä"),
        BEAR(Bear.class, 500, 5, 2, 80, 10, "üêª"),
        EAGLE(Eagle.class, 6, 20, 3, 1, 20, "ü¶Ö"),
        HORSE(Horse.class, 400, 20, 4, 60, 20, "üêé"),
        DEER(Deer.class, 300, 20, 4, 50, 20, "ü¶å"),
        RABBIT(Rabbit.class, 2, 150, 2, 0.45, 150, "üêá"),
        MOUSE(Mouse.class, 0.05, 500, 1, 0.01, 500, "üêÅ"),
        GOAT(Goat.class, 60, 140, 3, 10, 60, "üêê"),
        SHEEP(Sheep.class, 70, 140, 3, 15, 70, "üêë"),
        BOAR(Boar.class, 400, 50, 2, 50, 50, "üêó"),
        BUFFALO(Buffalo.class, 700, 10, 3, 100, 10, "üêÉ"),
        DUCK(Duck.class, 1, 200, 4, 0.50, 200, "ü¶Ü"),
        CATERPILLAR(Caterpillar.class, 0.01, 1000, 0, 0.01, 1000, "üêõ");

        private final Class<? extends Animal> animalClass;  // —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        private final double weight;                        // –≤–µ—Å
        private final int maxPerCell;                       // –º–∞–∫—Å–∏–º—É–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —è—á–µ–π–∫–µ
        private final int speed;                            // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ç–∞–∫—Ç–µ
        private final double foodNeeded;                    // –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è
        private final int initialCount;                     // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        private final String icon;                          // –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

        // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
        AnimalType(Class<? extends Animal> animalClass, double weight, int maxPerCell, int speed, double foodNeeded, int initialCount, String icon) {
            this.animalClass = animalClass;
            this.weight = weight;
            this.maxPerCell = maxPerCell;
            this.speed = speed;
            this.foodNeeded = foodNeeded;
            this.initialCount = initialCount;
            this.icon = icon;
        }

        // –≥–µ—Ç—Ç–µ—Ä—ã
        public Class<? extends Animal> getAnimalClass() {
            return animalClass;
        }

        public double getWeight() {
            return weight;
        }

        public int getMaxPerCell() {
            return maxPerCell;
        }

        public int getSpeed() {
            return speed;
        }

        public double getFoodNeeded() {
            return foodNeeded;
        }

        public int getInitialCount() {
            return initialCount;
        }

        public String getIcon() {
            return icon;
        }
    }

    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π
    public enum PlantType {
        GRASS(Grass.class, 1, 200, 1000, "üå±"),
        BUSH(Bush.class, 5, 50, 200, "üåø"),
        TREE(Tree.class, 20, 10, 50, "üå≥");

        private final Class<? extends Plant> plantClass;    // —Ç–∏–ø —Ä–∞—Å—Ç–µ–Ω–∏—è
        private final double weight;
        private final int maxPerCell;                       // –º–∞–∫—Å–∏–º—É–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —è—á–µ–π–∫–µ
        private final int initialCount;                     // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        private final String icon;                          // –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è

        PlantType(Class<? extends Plant> plantClass, double weight, int maxPerCell, int initialCount, String icon) {
            this.plantClass = plantClass;
            this.weight = weight;
            this.maxPerCell = maxPerCell;
            this.initialCount = initialCount;
            this.icon = icon;
        }

        // –≥–µ—Ç—Ç–µ—Ä—ã
        public Class<? extends Plant> getPlantClass() {
            return plantClass;
        }

        public double getWeight() {
            return weight;
        }

        public int getMaxPerCell() {
            return maxPerCell;
        }

        public int getInitialCount() {
            return initialCount;
        }

        public String getIcon() {
            return icon;
        }
    }

    // –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–µ–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
    // –†–∞—Å—Ç–µ–Ω–∏–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –Ω–µ—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –µ–¥—è—Ç
    // @formatter:off
    public static final int[][] PREDATION_PROBABILITIES = {
        //    –í   –£   –õ   –ú   –û   –õ   –û   –ö   –ú   –ö   –û   –ö   –ë   –£   –ì    –¢    –ö    –î
        //    –æ   –¥   –∏   –µ   —Ä   –æ   –ª   —Ä   —ã   –æ   –≤   –∞   —É   —Ç   —É    —Ä    —É    –µ
        //    –ª   –∞   —Å   –¥   –µ   —à   –µ   –æ   —à   –∑   —Ü   –±   –π   –∫   —Å    –∞    —Å    —Ä
        //    –∫   –≤   –∞   –≤   –ª   –∞   –Ω   –ª   —å   –∞   –∞   –∞   –≤   –∞   –µ    –≤    —Ç    –µ
        //                –µ       –¥   —å   –∏               –Ω   –æ       –Ω    –∞         –≤
        //                –¥       –¥       –∫                   –ª       –∏              –æ
        //                —å       —å                                   —Ü–∞
            { 0,  0,  0,  0,  0, 30, 50, 70, 80, 90, 85, 15, 20, 90,  0,   0,   0,   0}, // –í–æ–ª–∫
            { 0,  0,  0,  0,  0,  0,  0, 20, 40,  0,  0,  0,  0, 90,  0,   0,   0,   0}, // –£–¥–∞–≤
            { 0,  0,  0,  0,  0,  0,  0, 80, 90,  0,  0,  0,  0, 60,  0,   0,   0,   0}, // –õ–∏—Å–∞
            { 0,  0,  0,  0,  0, 80, 70, 80, 90, 70, 70, 50, 20, 10,  0,   0,   0,   0}, // –ú–µ–¥–≤–µ–¥—å
            { 0,  0,  0,  0,  0,  0,  0, 90, 90,  0,  0,  0,  0, 80,  0,   0,   0,   0}, // –û—Ä–µ–ª
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –õ–æ—à–∞–¥—å
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –û–ª–µ–Ω—å
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100,  50}, // –ö—Ä–æ–ª–∏–∫
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100,   0}, // –ú—ã—à—å
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100,  60}, // –ö–æ–∑–∞
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –û–≤—Ü–∞
            { 0,  0,  0,  0,  0,  0,  0,  0, 50,  0,  0,  0,  0,  0,  0,   0, 100, 100}, // –ö–∞–±–∞–Ω
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –ë—É–π–≤–æ–ª
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –£—Ç–∫–∞
            { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 100, 100, 100}, // –ì—É—Å–µ–Ω–∏—Ü–∞
    };
    // @formatter:on
}